diff --git a/rtc_base/BUILD.gn b/rtc_base/BUILD.gn
index 74bb964ac..8e753f910 100644
--- a/rtc_base/BUILD.gn
+++ b/rtc_base/BUILD.gn
@@ -59,7 +59,20 @@ if (!rtc_build_ssl && !build_with_mozilla) {
   config("external_ssl_library") {
     assert(rtc_ssl_root != "",
            "You must specify rtc_ssl_root when rtc_build_ssl==0.")
-    include_dirs = [ rtc_ssl_root ]
+    include_dirs = [ "$rtc_ssl_root/include" ]
+    # lib_dirs = [ "$rtc_ssl_root/lib" ]
+    if( is_win ) {
+      libs = [
+        "$rtc_ssl_root/lib/libcrypto.lib",
+        "$rtc_ssl_root/lib/libssl.lib"
+      ]
+    }
+    if( is_mac || is_linux || is_ios || is_android ) {
+      libs = [
+        "$rtc_ssl_root/lib/libssl.a",
+        "$rtc_ssl_root/lib/libcrypto.a",
+      ]
+    }
   }
 }

diff --git a/rtc_base/openssladapter.cc b/rtc_base/openssladapter.cc
index 05de6d0778..ac9e1cd85c 100644
--- a/rtc_base/openssladapter.cc
+++ b/rtc_base/openssladapter.cc
@@ -32,6 +32,7 @@
 #include "rtc_base/thread.h"
 
 #ifndef OPENSSL_IS_BORINGSSL
+#if (OPENSSL_VERSION_NUMBER < 0x10100000)
 
 // TODO(benwright): Use a nicer abstraction for mutex.
 
@@ -57,6 +58,7 @@ struct CRYPTO_dynlock_value {
   MUTEX_TYPE mutex;
 };
 
+#endif  // #if (OPENSSL_VERSION_NUMBER < 0x10100000)
 #endif  // #ifndef OPENSSL_IS_BORINGSSL
 
 //////////////////////////////////////////////////////////////////////
@@ -370,6 +372,9 @@ int OpenSSLAdapter::BeginSSL() {
   // Set a couple common TLS extensions; even though we don't use them yet.
   SSL_enable_ocsp_stapling(ssl_);
   SSL_enable_signed_cert_timestamps(ssl_);
+#elif (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  // requests OCSP stapled response as side-effect
+  SSL_enable_ct(ssl_, SSL_CT_VALIDATION_STRICT);
 #endif
 
   if (!alpn_protocols_.empty()) {
@@ -893,7 +898,7 @@ SSL_CTX* OpenSSLAdapter::CreateContext(SSLMode mode, bool enable_cache) {
   // (Default V1.0 to V1.2). However (D)TLSv1_2_client_method functions used
   // below in OpenSSL only support V1.2.
   SSL_CTX* ctx = nullptr;
-#ifdef OPENSSL_IS_BORINGSSL
+#if defined(OPENSSL_IS_BORINGSSL) || (OPENSSL_VERSION_NUMBER >= 0x10100000)
   ctx = SSL_CTX_new(mode == SSL_MODE_DTLS ? DTLS_method() : TLS_method());
 #else
   ctx = SSL_CTX_new(mode == SSL_MODE_DTLS ? DTLSv1_2_client_method()

diff --git a/rtc_base/opensslstreamadapter.cc b/rtc_base/opensslstreamadapter.cc
index fd54a082a7..88e4f98dfc 100644
--- a/rtc_base/opensslstreamadapter.cc
+++ b/rtc_base/opensslstreamadapter.cc
@@ -84,6 +84,21 @@ struct SslCipherMapEntry {
 
 // The "SSL_CIPHER_standard_name" function is only available in OpenSSL when
 // compiled with tracing, so we need to define the mapping manually here.
+
+// TODO(josemrecio): kSslCipherMap should be in synch with kCiphers[] defined in
+//   webrtc/src/third_party/boringssl/src/ssl/ssl_cipher.cc
+// especially remove ciphers not included by BoringSSL
+
+#ifdef TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
+#define TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
+#define TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305
+#endif
+
+#ifdef TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
+#define TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
+#define TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
+#endif
+
 static const SslCipherMapEntry kSslCipherMap[] = {
     // TLS v1.0 ciphersuites from RFC2246.
     DEFINE_CIPHER_ENTRY_SSL3(RSA_RC4_128_SHA),
@@ -140,6 +155,15 @@ static const SslCipherMapEntry kSslCipherMap[] = {
     DEFINE_CIPHER_ENTRY_TLS1(ECDHE_RSA_WITH_AES_128_GCM_SHA256),
     DEFINE_CIPHER_ENTRY_TLS1(ECDHE_RSA_WITH_AES_256_GCM_SHA384),
 
+    // CHACHA20
+#ifdef TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
+    DEFINE_CIPHER_ENTRY_TLS1(ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256),
+#endif
+
+#ifdef TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305
+    DEFINE_CIPHER_ENTRY_TLS1(ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256),
+#endif
+
     {0, nullptr}};
 #endif  // #ifndef OPENSSL_IS_BORINGSSL
 
@@ -351,9 +375,10 @@ std::string OpenSSLStreamAdapter::SslCipherSuiteToName(int cipher_suite) {
   }
   return SSL_CIPHER_standard_name(ssl_cipher);
 #else
+  const int value_to_check = 0x03000000L | cipher_suite;
   for (const SslCipherMapEntry* entry = kSslCipherMap; entry->rfc_name;
        ++entry) {
-    if (cipher_suite == static_cast<int>(entry->openssl_id)) {
+    if (value_to_check == static_cast<int>(entry->openssl_id)) {
       return entry->rfc_name;
     }
   }
@@ -790,10 +815,13 @@ int OpenSSLStreamAdapter::BeginSSL() {
 #ifdef OPENSSL_IS_BORINGSSL
     DTLSv1_set_initial_timeout_duration(ssl_, dtls_handshake_timeout_ms_);
 #else
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    DTLSv1_set_initial_timeout_duration(ssl_, dtls_handshake_timeout_ms_);
+#endif
     // Enable read-ahead for DTLS so whole packets are read from internal BIO
     // before parsing. This is done internally by BoringSSL for DTLS.
     SSL_set_read_ahead(ssl_, 1);
-#endif
+#endif  // OPENSSL_IS_BORINGSSL
   }
 
   SSL_set_mode(ssl_, SSL_MODE_ENABLE_PARTIAL_WRITE |
@@ -946,9 +974,10 @@ void OpenSSLStreamAdapter::OnMessage(Message* msg) {
 SSL_CTX* OpenSSLStreamAdapter::SetupSSLContext() {
   SSL_CTX* ctx = nullptr;
 
-#ifdef OPENSSL_IS_BORINGSSL
+#if defined(OPENSSL_IS_BORINGSSL) || (OPENSSL_VERSION_NUMBER >= 0x10100000)
   ctx = SSL_CTX_new(ssl_mode_ == SSL_MODE_DTLS ? DTLS_method() : TLS_method());
 // Version limiting for BoringSSL will be done below.
+// Version limiting for OpenSSL 1.1.0 will be done below.
 #else
   const SSL_METHOD* method;
   switch (ssl_max_version_) {
@@ -993,7 +1022,7 @@ SSL_CTX* OpenSSLStreamAdapter::SetupSSLContext() {
   if (ctx == nullptr)
     return nullptr;
 
-#ifdef OPENSSL_IS_BORINGSSL
+#if defined(OPENSSL_IS_BORINGSSL)
   SSL_CTX_set_min_proto_version(
       ctx, ssl_mode_ == SSL_MODE_DTLS ? DTLS1_VERSION : TLS1_VERSION);
   switch (ssl_max_version_) {
@@ -1014,7 +1043,27 @@ SSL_CTX* OpenSSLStreamAdapter::SetupSSLContext() {
   if (g_use_time_callback_for_testing) {
     SSL_CTX_set_current_time_cb(ctx, &TimeCallbackForTesting);
   }
+#else
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX_set_min_proto_version(
+      ctx, ssl_mode_ == SSL_MODE_DTLS ? DTLS1_VERSION : TLS1_VERSION);
+  switch (ssl_max_version_) {
+    case SSL_PROTOCOL_TLS_10:
+      SSL_CTX_set_max_proto_version(
+          ctx, ssl_mode_ == SSL_MODE_DTLS ? DTLS1_VERSION : TLS1_VERSION);
+      break;
+    case SSL_PROTOCOL_TLS_11:
+      SSL_CTX_set_max_proto_version(
+          ctx, ssl_mode_ == SSL_MODE_DTLS ? DTLS1_VERSION : TLS1_1_VERSION);
+      break;
+    case SSL_PROTOCOL_TLS_12:
+    default:
+      SSL_CTX_set_max_proto_version(
+          ctx, ssl_mode_ == SSL_MODE_DTLS ? DTLS1_2_VERSION : TLS1_2_VERSION);
+      break;
+  }
 #endif
+#endif  // OPENSSL_IS_BORINGSSL
 
   if (identity_ && !identity_->ConfigureIdentity(ctx)) {
     SSL_CTX_free(ctx);
@@ -1111,9 +1160,14 @@ int OpenSSLStreamAdapter::SSLVerifyCallback(X509_STORE_CTX* store, void* arg) {
   stream->peer_cert_chain_.reset(new SSLCertChain(std::move(cert_chain)));
 #else
   // Record the peer's certificate.
-  X509* cert = X509_STORE_CTX_get0_cert(store);
-  stream->peer_cert_chain_.reset(
-      new SSLCertChain(new OpenSSLCertificate(cert)));
+  STACK_OF(X509)* chain = X509_STORE_CTX_get0_untrusted(store);
+  // Creates certificate chain.
+  std::vector<std::unique_ptr<SSLCertificate>> cert_chain;
+  for (int i = 0; i < sk_X509_num(chain); i++) {
+    X509 *cert = sk_X509_value(chain, i);
+    cert_chain.emplace_back(new OpenSSLCertificate(cert));
+  }
+  stream->peer_cert_chain_.reset(new SSLCertChain(std::move(cert_chain)));
 #endif
 
   // If the peer certificate digest isn't known yet, we'll wait to verify
diff --git a/rtc_base/opensslutility.cc b/rtc_base/opensslutility.cc
index 2b4ffb6960..44be9a0d26 100644
--- a/rtc_base/opensslutility.cc
+++ b/rtc_base/opensslutility.cc
@@ -25,6 +25,9 @@
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 #include <openssl/x509v3.h>
+#ifndef OPENSSL_IS_BORINGSSL
+#include <openssl/err.h>
+#endif
 
 #include "rtc_base/arraysize.h"
 #include "rtc_base/checks.h"

diff --git a/rtc_base/opensslidentity.cc b/rtc_base/opensslidentity.cc
index a8c6919779..0e76753727 100644
--- a/rtc_base/opensslidentity.cc
+++ b/rtc_base/opensslidentity.cc
@@ -277,7 +277,14 @@ SSLIdentity* OpenSSLIdentity::FromPEMChainStrings(
     X509* x509 =
         PEM_read_bio_X509(bio, nullptr, nullptr, const_cast<char*>("\0"));
     if (x509 == nullptr) {
+    // josemrecio - this is probably a libwebrtc bug
+    // ERR_peek_last_error() should always be used, otherwise any previous error in the queue
+    //   will be read instead of potential PEM error
+#ifdef OPENSSL_IS_BORINGSSL
       uint32_t err = ERR_peek_error();
+#else
+      uint32_t err = ERR_peek_last_error();
+#endif
       if (ERR_GET_LIB(err) == ERR_LIB_PEM &&
           ERR_GET_REASON(err) == PEM_R_NO_START_LINE) {
         break;

diff --git a/rtc_base/opensslsessioncache_unittest.cc b/rtc_base/opensslsessioncache_unittest.cc
index 6489b2bc2f..8e9605518f 100644
--- a/rtc_base/opensslsessioncache_unittest.cc
+++ b/rtc_base/opensslsessioncache_unittest.cc
@@ -18,10 +18,20 @@
 #include "rtc_base/openssl.h"
 #include "rtc_base/opensslsessioncache.h"
 
+// josemrecio - dirty workaround, this must be done properly
+#ifndef OPENSSL_IS_BORINGSSL
+#warning "SSL_SESSION_new should be properly addressed"
+#define SSL_SESSION_new(x) SSL_SESSION_new()
+#endif
+
 namespace rtc {
 
 TEST(OpenSSLSessionCache, DTLSModeSetCorrectly) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
 
   OpenSSLSessionCache session_cache(SSL_MODE_DTLS, ssl_ctx);
   EXPECT_EQ(session_cache.GetSSLMode(), SSL_MODE_DTLS);
@@ -30,7 +40,11 @@ TEST(OpenSSLSessionCache, DTLSModeSetCorrectly) {
 }
 
 TEST(OpenSSLSessionCache, TLSModeSetCorrectly) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(TLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(TLSv1_2_client_method());
+#endif
 
   OpenSSLSessionCache session_cache(SSL_MODE_TLS, ssl_ctx);
   EXPECT_EQ(session_cache.GetSSLMode(), SSL_MODE_TLS);
@@ -39,7 +53,11 @@ TEST(OpenSSLSessionCache, TLSModeSetCorrectly) {
 }
 
 TEST(OpenSSLSessionCache, SSLContextSetCorrectly) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
 
   OpenSSLSessionCache session_cache(SSL_MODE_DTLS, ssl_ctx);
   EXPECT_EQ(session_cache.GetSSLContext(), ssl_ctx);
@@ -48,7 +66,11 @@ TEST(OpenSSLSessionCache, SSLContextSetCorrectly) {
 }
 
 TEST(OpenSSLSessionCache, InvalidLookupReturnsNullptr) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
 
   OpenSSLSessionCache session_cache(SSL_MODE_DTLS, ssl_ctx);
   EXPECT_EQ(session_cache.LookupSession("Invalid"), nullptr);
@@ -59,7 +81,11 @@ TEST(OpenSSLSessionCache, InvalidLookupReturnsNullptr) {
 }
 
 TEST(OpenSSLSessionCache, SimpleValidSessionLookup) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
   SSL_SESSION* ssl_session = SSL_SESSION_new(ssl_ctx);
 
   OpenSSLSessionCache session_cache(SSL_MODE_DTLS, ssl_ctx);
@@ -70,7 +96,11 @@ TEST(OpenSSLSessionCache, SimpleValidSessionLookup) {
 }
 
 TEST(OpenSSLSessionCache, AddToExistingReplacesPrevious) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
   SSL_SESSION* ssl_session_1 = SSL_SESSION_new(ssl_ctx);
   SSL_SESSION* ssl_session_2 = SSL_SESSION_new(ssl_ctx);
 
diff --git a/rtc_base/opensslutility_unittest.cc b/rtc_base/opensslutility_unittest.cc
index 2f952ae4b2..511b9ac455 100644
--- a/rtc_base/opensslutility_unittest.cc
+++ b/rtc_base/opensslutility_unittest.cc
@@ -227,7 +227,11 @@ SSL* CreateSSLWithPeerCertificate(const unsigned char* cert, size_t cert_len) {
 }  // namespace
 
 TEST(OpenSSLUtilityTest, VerifyPeerCertMatchesHostFailsOnNoPeerCertificate) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000)
+  SSL_CTX* ssl_ctx = SSL_CTX_new(DTLS_method());
+#else
   SSL_CTX* ssl_ctx = SSL_CTX_new(DTLSv1_2_client_method());
+#endif
   SSL* ssl = SSL_new(ssl_ctx);
 
   EXPECT_FALSE(openssl::VerifyPeerCertMatchesHost(ssl, "webrtc.org"));

diff --git a/third_party/usrsctp/BUILD.gn b/third_party/usrsctp/BUILD.gn
index 94f26786e1d..4d8efbfcbb2 100644
--- a/third_party/usrsctp/BUILD.gn
+++ b/third_party/usrsctp/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/toolchain/toolchain.gni")
+import("//webrtc.gni")
 
 config("usrsctp_config") {
   include_dirs = [
@@ -110,6 +111,9 @@ static_library("usrsctp") {
   ]
 
   public_configs = [ ":usrsctp_config" ]
+  if (!rtc_build_ssl) {
+    public_configs += [ "//rtc_base:external_ssl_library" ]
+  }
 
   cflags = [
     "-UINET",
@@ -140,7 +144,8 @@ static_library("usrsctp") {
   if (is_fuchsia) {
     defines += [ "__Userspace_os_Fuchsia" ]
   }
-  deps = [
-    "//third_party/boringssl",
-  ]
+  if (rtc_build_ssl) {
+    deps = [ "//third_party/boringssl", ]
+  }
+
 }

diff --git a/third_party/libsrtp/BUILD.gn b/third_party/libsrtp/BUILD.gn
index 5d386d6..6faca23 100644
--- a/third_party/libsrtp/BUILD.gn
+++ b/third_party/libsrtp/BUILD.gn
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//testing/test.gni")
+import("//webrtc.gni")
 
 declare_args() {
   # Tests may not be appropriate for some build environments, e.g. Windows.
@@ -67,6 +68,9 @@ static_library("libsrtp") {
   configs += [ "//build/config/compiler:no_chromium_code" ]
   configs += [ ":libsrtp_warnings" ]
   public_configs = [ ":libsrtp_config" ]
+  if (!rtc_build_ssl) {
+    public_configs += [ "//rtc_base:external_ssl_library" ]
+    }
   sources = [
     # includes
     "include/ekt.h",
@@ -113,9 +117,11 @@ static_library("libsrtp") {
     "srtp/ekt.c",
     "srtp/srtp.c",
   ]
-  public_deps = [
-    "//third_party/boringssl:boringssl",
-  ]
+  if (rtc_build_ssl) {
+    public_deps = [
+      "//third_party/boringssl:boringssl",
+    ]
+  }
 }
 
 if (build_libsrtp_tests) {
